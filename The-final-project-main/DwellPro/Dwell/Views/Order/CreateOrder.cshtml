@model DwellMVC.Models.CreateOrderViewModel

@{
    ViewData["Title"] = "ثبت سفارش";
}

<h2>ثبت سفارش برای سرویس خانگی: @Model.SelectedHomeService.Name</h2>

<div class="home-services-wrapper">
    <div class="home-service-card">
        <div class="home-service-image">
            <img src="@Model.SelectedHomeService.ImageUrl" alt="@Model.SelectedHomeService.Name">
        </div>
        <div class="home-service-info">
            <h3>@Model.SelectedHomeService.Name</h3>
            <p>@Model.SelectedHomeService.Description</p>
            <p>قیمت پایه: @Model.SelectedHomeService.BasePrice تومان</p>
            <p>تعداد بازدید: <span id="viewCount-@Model.SelectedHomeService.Id">@Model.SelectedHomeService.ViewCount</span></p>

            <form method="post" action="@Url.Action("CreateOrder", "Order")" enctype="multipart/form-data">
                @Html.AntiForgeryToken()

                <input type="hidden" name="HomeServiceId" value="@Model.HomeServiceId" />

                <div class="form-group">
                    <label for="ExecutionDate">تاریخ انجام کار</label>
                    <input type="date" name="ExecutionDate" value="@Model.ExecutionDate.ToString("yyyy-MM-dd")" required class="form-control" />
                    @Html.ValidationMessageFor(m => m.ExecutionDate, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    <label for="ExecutionTime">زمان انجام کار</label>
                    <input type="time" name="ExecutionTime" value="@Model.ExecutionTime.ToString(@"hh\:mm")" required class="form-control" />
                    @Html.ValidationMessageFor(m => m.ExecutionTime, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    <label for="Description">توضیحات</label>
                    <textarea name="Description" rows="4" class="form-control">@Model.Description</textarea>
                    @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    <label for="BasePrice">قیمت پایه</label>
                    <input type="number" name="BasePrice" value="@Model.BasePrice" class="form-control" />
                    @Html.ValidationMessageFor(m => m.BasePrice, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    <label for="upload-image-one">تصاویر</label>
                    <input asp-for="Pictures" type="file" id="upload-image-one" class="form-control" multiple>
                    <span asp-validation-for="Pictures" class="text-danger"></span>

                    @if (Model?.ExistingPictures != null && Model.ExistingPictures.Any())
                    {
                        <div>
                            <p>تصاویر قبلی:</p>
                            <ul>
                                @foreach (var pic in Model.ExistingPictures)
                                {
                                    <li>@pic</li>
                                }
                            </ul>
                            <input type="hidden" name="ExistingPictures" value="@string.Join(",", Model.ExistingPictures)" />
                        </div>
                    }
                </div>
               
                <div id="imagePreviewContainer" class="d-flex flex-wrap" style="overflow-x: auto; gap: 10px; margin-top: 15px; height: 120px;">
                </div>

                <button type="submit" class="btn btn-primary">ثبت سفارش</button>
            </form> 
        </div>
    </div>
</div>

<style>
    .home-services-wrapper {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }

    .home-service-card {
        width: 100%;
        max-width: 450px;
        border: 2px solid #f8d7da;
        border-radius: 12px;
        padding: 20px;
        background-color: #fff;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        transition: box-shadow 0.3s ease;
    }

        .home-service-card:hover {
            box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);
        }

    .home-service-image img {
        width: 100%;
        height: auto;
        border-radius: 8px;
    }

    .home-service-info h3 {
        font-size: 20px;
        color: #333;
        margin-top: 10px;
    }

    .home-service-info p {
        font-size: 14px;
        color: #666;
        margin-bottom: 15px;
    }

    .home-service-info form {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .home-service-info label {
        font-size: 14px;
        color: #555;
    }

    .home-service-info input,
    .home-service-info textarea {
        padding: 10px;
        border: 1px solid #f8d7da;
        border-radius: 8px;
        font-size: 14px;
        outline: none;
        transition: border-color 0.3s ease, box-shadow 0.3s ease;
    }

        .home-service-info input:focus,
        .home-service-info textarea:focus {
            border-color: #f44336;
            box-shadow: 0 0 5px rgba(244, 67, 54, 0.5);
        }

    .home-service-info button {
        padding: 12px;
        background-color: #f44336;
        color: white;
        border: none;
        border-radius: 8px;
        font-size: 16px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .home-service-info button:hover {
            background-color: #d32f2f;
        }

    .home-service-info textarea {
        resize: vertical;
        min-height: 100px;
    }

    .home-service-info input[type="date"],
    .home-service-info input[type="time"] {
        max-width: 200px;
    }

    #imagePreviewContainer {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-top: 15px;
        overflow-x: auto;
        height: 120px;
        max-width: 100%;
    }

    .image-preview {
        position: relative;
        width: 100px;
        height: 100px;
        overflow: hidden;
        border-radius: 8px;
    }

        .image-preview img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

    .delete-btn {
        position: absolute;
        top: 5px;
        right: 5px;
        background-color: rgba(0, 0, 0, 0.5);
        color: white;
        border: none;
        border-radius: 50%;
        width: 20px;
        height: 20px;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 14px;
        cursor: pointer;
    }

        .delete-btn:hover {
            background-color: red;
        }
</style>


<script>
    let dataTransfer = new DataTransfer(); // نگه داشتن لیست فایل‌ها هنگام تغییر انتخاب

    document.getElementById('upload-image-one').addEventListener('change', function (event) {
        let previewContainer = document.getElementById('imagePreviewContainer');

        for (let file of event.target.files) {
            dataTransfer.items.add(file); // اضافه کردن فایل‌ها بدون پاک شدن قبلی‌ها

            let previewDiv = document.createElement('div');
            previewDiv.classList.add('image-preview');

            let img = document.createElement('img');
            img.src = URL.createObjectURL(file);
            img.width = 100;
            img.height = 100;

            let deleteBtn = document.createElement('button');
            deleteBtn.innerText = '×';
            deleteBtn.classList.add('delete-btn');
            deleteBtn.onclick = function () {
                let index = Array.from(dataTransfer.files).indexOf(file);
                dataTransfer.items.remove(index); // حذف فایل از لیست
                previewDiv.remove(); // حذف نمایش تصویر
                updateFileInput(); // بروزرسانی ورودی فایل
            };

            previewDiv.appendChild(img);
            previewDiv.appendChild(deleteBtn);
            previewContainer.appendChild(previewDiv);
        }

        updateFileInput();
    });

    function updateFileInput() {
        let inputElement = document.getElementById('upload-image-one');
        inputElement.files = dataTransfer.files; // بروزرسانی فایل‌های ورودی
    }

    function uploadFiles() {
        let formData = new FormData();
        for (let file of dataTransfer.files) {
            formData.append('Pictures', file);
        }

        fetch('/Upload', { method: 'POST', body: formData })
            .then(response => response.json())
            .then(data => alert('آپلود موفقیت‌آمیز بود!'))
            .catch(error => alert('خطا در آپلود!'));
    }
</script>
